# Generated by Django 3.2.9 on 2021-11-30 17:22

import django.core.validators
import django.utils.timezone
from django.db import migrations, models

import login.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('phone', models.CharField(blank=True, max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='Номер телефона в формате 89123456789', regex='^((8|\\+7)[\\-]?)?(\\(?\\d{3}\\)?[\\-]?)?[\\d\\-]{7,10}$')], verbose_name='Номер телефона')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='Почта заказчика')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=40, verbose_name='Отчество')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Адрес заказчика')),
                ('avatar', models.TextField(max_length=99999, verbose_name='Аватар')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'permissions': (('can_edit', 'Может редактировать страницы'), ('can_manager', 'Имеет доступ на страницы менеджеров')),
            },
            managers=[
                ('objects', login.managers.UserManager()),
            ],
        ),
    ]
